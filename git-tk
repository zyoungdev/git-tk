#!/bin/bash

# This file is part of the git-tk distribution
# Copyright (c) 2017 Zachary Young.
# 
# This program is free software: you can redistribute it and/or modify  
# it under the terms of the GNU General Public License as published by  
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program. If not, see <http://www.gnu.org/licenses/>.

args=( ${@} )

log_brand="[Git TK]"

timer_branch="tk"
old_branch=.git-tk_old-branch

now="$(date)"

###################################################################
#                       Colors
###################################################################
    reset=$(tput sgr0)

    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    PURPLE=$(tput setaf 5)
    CYAN=$(tput setaf 6)
    WHITE=$(tput setaf 7)

    BRED=$(tput setaf 1 ; tput bold)
    BGREEN=$(tput setaf 2 ; tput bold)
    BYELLOW=$(tput setaf 3 ; tput bold)
    BBLUE=$(tput setaf 4 ; tput bold)
    BPURPLE=$(tput setaf 5 ; tput bold)
    BCYAN=$(tput setaf 6 ; tput bold)
    BWHITE=$(tput setaf 7 ; tput bold)

###################################################################
#                       Helper Functions
###################################################################
    function check_for_tk_branch {
        if ! git branch | grep -q $timer_branch; then
            echo "Please initiate git-tk with: git-tk init"
            exit
        fi
    }

    function checkout_old {
        cat $old_branch | git checkout - > /dev/null 2>&1
        /usr/bin/rm $old_branch
        pop
    }

    function checkout_timer {
        set_old_branch
        stash
        git checkout $timer_branch > /dev/null 2>&1
    }

    function pop {
        git stash pop > /dev/null 2>&1
    }

    function rebase_continue {
        git rebase --continue | grep Stopped
    }

    function rebase_finished {
        if ! is_rebasing; then
            checkout_old
        fi
    }

    function rebase_sort {
        export GIT_SEQUENCE_EDITOR="sort --output=\".git/rebase-merge/git-rebase-todo\" -k11 -k7M -k8 -k9"
        git rebase -ik $(git rev-list --max-parents=0 HEAD)
    }

    function is_rebasing {
        git status | grep -q rebase
    }

    function set_acc_time {
        val=$1
        seconds=$(( $val % 60 ))
        val=$(( $val / 60 ))
        minutes=$(( $val % 60 ))
        val=$(( $val / 60 ))
        hours=$(( $val % 24 ))
        val=$(( $val / 24 ))
        days=$(( $val % 365 ))
        val=$(( $val / 365 ))
        years=$val

        acc_time_string=""
        [ $years -ne 0 ] && acc_time_string="$acc_time_string""$years""y "
        [ $days -ne 0 ] && acc_time_string="$acc_time_string""$days""d "
        [ $hours -ne 0 ] && acc_time_string="$acc_time_string""$hours""h "
        [ $minutes -ne 0 ] && acc_time_string="$acc_time_string""$minutes""m "
        [ $seconds -ne 0 ] && acc_time_string="$acc_time_string""$seconds""s"
    }

    function set_commit_date {
        new_date="$1"
        export GIT_AUTHOR_DATE="$new_date"
        export GIT_COMMITTER_DATE="$new_date"

        if ! date -d "$new_date" > /dev/null 2>&1; then
            echo "\"$new_date\" is an invalid date format."
            exit
        fi
    }

    function set_hash_arrays {
        mapfile -t start_hashes < <(git log --reverse --format=format:"%h %s" $timer_branch 2> /dev/null | grep Start | cut -d ' ' -f 1)
        mapfile -t end_hashes < <(git log --reverse --format=format:"%h %s" $timer_branch 2> /dev/null | grep End | cut -d ' ' -f 1)
        mapfile -t total_hashes < <(git log --reverse --format=format:"%h %s" $timer_branch 2> /dev/null | grep Total | cut -d ' ' -f 1)
    }

    function set_old_branch {
        touch $old_branch
        git status -b --porcelain | head -n 1 | cut -d ' ' -f 2 > $old_branch
    }

    function set_time_arrays {
        mapfile -t starts < <(git log --reverse --pretty=format:"%s" $timer_branch 2> /dev/null | grep Start | cut -d ' ' -f 4-)
        mapfile -t ends < <(git log --reverse --pretty=format:"%s" $timer_branch 2> /dev/null | grep End | cut -d ' ' -f 4-)
    }

    function stash {
        git stash > /dev/null
    }

    function wait_for_input {
        read -n1 -r -p "Press any key to continue..." key
    }

###################################################################
#                       Show Log
###################################################################
    function log {
        for i in ${!starts[@]}; do
            recording=false

            # If currently recording time
            if (( $i >= ${#ends[@]} )); then
                recording=true
                ends[ $i ]=$now
            fi


            start="${starts[ $i ]}"
            end="${ends[ $i ]}"
            s=$(date -d "$start" +%s )
            e=$(date -d "$end" +%s )
            diff=$(( e - s ))
            acc=$(( acc + diff ))

            # Print starting time
            printf "$GREEN${start_hashes[ $i ]} "
            git log -1 --oneline --format=format:"%s" ${start_hashes[ $i ]} | cut -d ' ' -f 3-
            printf "$reset"

            # Print all commits
            if [[ "${args[ 1 ]}" == "-v" ]]; then
                git log --reverse --color=always --all --not $timer_branch --after="${starts[ $i ]}" --before="${ends[ $i ]}"
            else
                git log --reverse --oneline --decorate --color=always --all --not $timer_branch --after="${starts[ $i ]}" --before="${ends[ $i ]}"
            fi

            if $recording; then
                echo "$RED####### End:   $BRED""CURRENTLY ACTIVE$reset"
            else
                # Print ending time
                printf "$RED${end_hashes[ $i ]} "
                git log -1 --oneline --format=format:"%s" ${end_hashes[ $i ]} | cut -d ' ' -f 3-
                printf "$reset"
            fi

            # Print Total
            set_acc_time "$diff"
            echo "$BLUE""####### Total: ""$acc_time_string""$reset"

            echo ""
        done

        set_acc_time "$acc"
        echo "$BRED""Grand Total: ""$acc_time_string""$reset"
    }

###################################################################
#                       Timestamp
###################################################################
    function create_timestamp {
        if is_rebasing; then
            echo "Currently rebasing"
            exit
        fi

        set_time_arrays

        if (( ${#starts[@]} > ${#ends[@]} )); then
            start_or_end_str="End:   "
            echo "$log_brand Setting end of time slot"
        else
            start_or_end_str="Start: "
            echo "$log_brand Setting start of time slot"
        fi

        # Switch to timer_branch
        checkout_timer

        # Generate or collect timestamp
        if [[ -z "${1}" ]]; then
            timestamp="$now"
        else
            timestamp="${1}"
        fi

        # Commit to timer_branch
        commit_timestamp

        # Return to original branch
        checkout_old
    }

    function commit_timestamp {
        git commit --allow-empty -m "$log_brand ""$start_or_end_str""$timestamp" > /dev/null
    }

###################################################################
#                           Rebase
###################################################################
    function rebase {
        timestamp="${args[@]:1}"
        if is_rebasing; then
            if [[ -z "$timestamp" ]]; then
                rebase_continue
                rebase_finished
            else
                if git log --oneline -1 | grep -q Start; then
                    rebase_str="Start: "
                    rebase_commit
                elif git log --oneline -1 | grep -q End; then
                    rebase_str="End:   "
                    rebase_commit
                else
                    echo "This is not a git-tk commit"
                    git rebase --abort
                    rebase_finished
                fi
            fi

            exit
        fi

        echo "$log_brand Editing TK History"

        if git branch | grep -q $timer_branch; then
            checkout_timer
        else
            echo "Please initiate the timer"
            exit
        fi

        git rebase -q -ik $(git rev-list --max-parents=0 HEAD)

        rebase_finished
    }

    function rebase_commit {
        set_commit_date "$timestamp"
        if git commit --allow-empty --amend --date="$new_date" -m "$log_brand ""$rebase_str""$new_date" > /dev/null; then
            rebase_continue
            rebase_finished
        fi
    }

###################################################################
#                       Init TK
###################################################################
    function init {
        echo "[Git TK] Setting up Git TK"

        if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            git branch $timer_branch $(git rev-list --max-parents=0 HEAD) > /dev/null
        else
            git init
            git commit --allow-empty -m "Init"

            git branch $timer_branch $(git rev-list --max-parents=0 HEAD) > /dev/null
        fi
    }

###################################################################
#                             Main
###################################################################
    if [[ "$1" == "init" ]]; then
        init
        exit
    fi

    check_for_tk_branch

    if (( $# < 1 )); then
        create_timestamp
    elif date -d "${@}" > /dev/null 2>&1; then
        create_timestamp "${@}"
    elif [[ "$1" == "log" ]]; then
        set_time_arrays
        set_hash_arrays
        log
    elif [[ "$1" == "rebase" ]]; then
        rebase
    else
        echo "$1 is not a valid command"
    fi
